from telegram import Update
from telegram.ext import ContextTypes

from bot.constants import (STATE_MENU, STATE_NETW_CONTACTS, STATE_NETW_GRADE,
                           STATE_NETW_NAME, STATE_NETW_ROLE, STATE_NETW_SHOW,
                           STATE_NETW_STACK)
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.networking_keyboards import (get_next_profile_keyboard,
                                                get_profiles_finished_keyboard)
from bot.logging_tools import logger
from bot.services import networking_service
from bot.services.core_service import is_speaker
from bot.utils.telegram_utils import send_message_with_retry


async def networking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—à—ë–ª –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥", telegram_id)
    profile = await networking_service.get_profile(telegram_id)
    if not profile:
        context.user_data["profile"] = {}
        await send_message_with_retry(
            update.message, "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò–û:"
        )
        return STATE_NETW_NAME

    context.user_data["viewed_profiles"] = []
    return await show_next_profile(update, context)


async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    viewed = context.user_data.get("viewed_profiles", [])
    profiles = await networking_service.get_profiles_list(telegram_id, viewed)

    if not profiles:
        logger.info("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", telegram_id)
        await send_message_with_retry(
            update.message,
            "–ë–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_profiles_finished_keyboard(),
        )
        return STATE_NETW_SHOW

    profile = profiles[0]
    context.user_data["current_profile_id"] = profile["telegram_id"]
    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
        telegram_id,
        profile["telegram_id"],
    )
    await send_message_with_retry(
        update.message,
        f"–§–ò–û: {profile['name']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {profile['contacts']}\n"
        f"–°—Ç–µ–∫: {profile['stack']}\n"
        f"–†–æ–ª—å: {profile['role']}\n"
        f"–ì—Ä–µ–π–¥: {profile['grade']}",
        reply_markup=get_next_profile_keyboard(),
    )
    return STATE_NETW_SHOW


async def netw_show_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    telegram_id = update.effective_user.id
    viewed = context.user_data.get("viewed_profiles", [])

    if text == "‚û°Ô∏è –î–∞–ª—å—à–µ":
        current = context.user_data.get("current_profile_id")
        if current and current not in viewed:
            viewed.append(current)
        context.user_data["viewed_profiles"] = viewed
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–∂–∞–ª '–î–∞–ª—å—à–µ' –≤ –∞–Ω–∫–µ—Ç–∞—Ö", telegram_id)
        return await show_next_profile(update, context)
    if text == "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        context.user_data["viewed_profiles"] = []
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç —Å–Ω–∞—á–∞–ª–∞", telegram_id)
        return await show_next_profile(update, context)
    if text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        is_spk = await is_speaker(telegram_id)
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞", telegram_id
        )
        await send_message_with_retry(
            update.message,
            "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
        )
        return STATE_MENU

    await send_message_with_retry(
        update.message,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!",
        reply_markup=get_next_profile_keyboard(),
    )
    return STATE_NETW_SHOW


async def netw_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["name"] = update.message.text.strip()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∫–∞–∑–∞–ª –§–ò–û –¥–ª—è –∞–Ω–∫–µ—Ç—ã", update.effective_user.id)
    await send_message_with_retry(
        update.message, "–£–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (Telegram, —Ç–µ–ª–µ—Ñ–æ–Ω):"
    )
    return STATE_NETW_CONTACTS


async def netw_contacts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["contacts"] = update.message.text.strip()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∫–∞–∑–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã", update.effective_user.id)
    await send_message_with_retry(
        update.message,
        "–û–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, PostgreSQL):",
    )
    return STATE_NETW_STACK


async def netw_stack_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["stack"] = update.message.text.strip()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∫–∞–∑–∞–ª —Å—Ç–µ–∫ –¥–ª—è –∞–Ω–∫–µ—Ç—ã", update.effective_user.id)
    await send_message_with_retry(
        update.message, "–¢–≤–æ—è —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Backend, Frontend, DevOps):"
    )
    return STATE_NETW_ROLE


async def netw_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["role"] = update.message.text.strip()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∫–∞–∑–∞–ª —Ä–æ–ª—å –¥–ª—è –∞–Ω–∫–µ—Ç—ã", update.effective_user.id)
    await send_message_with_retry(
        update.message, "–¢–≤–æ–π –≥—Ä–µ–π–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Junior, Middle, Senior):"
    )
    return STATE_NETW_GRADE


async def netw_grade_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["grade"] = update.message.text.strip()
    profile = context.user_data["profile"]
    telegram_id = update.effective_user.id

    try:
        await networking_service.save_profile(telegram_id, profile)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ—Ö—Ä–∞–Ω–∏–ª –∞–Ω–∫–µ—Ç—É", telegram_id)
        await send_message_with_retry(update.message, "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéâ")
    except ValueError as err:
        logger.warning(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", telegram_id, err
        )
        await send_message_with_retry(
            update.message, f"–û—à–∏–±–∫–∞: {err}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )
        return STATE_NETW_GRADE

    context.user_data["viewed_profiles"] = []
    return await show_next_profile(update, context)
